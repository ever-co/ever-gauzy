version: '3.8'

services:
    db:
        image: postgres:14-alpine
        container_name: db
        restart: always
        environment:
            POSTGRES_DB: ${DB_NAME:-postgres}
            POSTGRES_USER: ${DB_USER:-postgres}
            POSTGRES_PASSWORD: ${DB_PASS:-root}
        healthcheck:
            test:
                [
                    'CMD-SHELL',
                    'psql postgres://$${POSTGRES_USER}:$${POSTGRES_PASSWORD}@localhost:5432/$${POSTGRES_DB} || exit 1'
                ]
        volumes:
            - postgres_data:/var/lib/postgresql/data
        ports:
            - '5432:5432'
        networks:
            - overlay

    elasticsearch:
        image: "elasticsearch:7.17.7"
        volumes:
            - elasticsearch_data:/usr/share/elasticsearch/data
        environment:
            ES_JAVA_OPTS: -Xms512m -Xmx1024m
            discovery.type: single-node
            xpack.security.enabled: "false"
        ports:
            - "9200"
            - "9300"
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost:9200/_cat/health" ]
            interval: 5s
            timeout: 5s
            retries: 10
            start_period: 20s
        networks:
            - overlay

    redis:
        image: "redis:7.0.2-alpine"
        ports:
            - "6379"
        networks:
            - overlay

    minio:
        restart: always
        image: quay.io/minio/minio:latest
        volumes:
            - minio_data:/data
        environment:
            MINIO_ROOT_USER: ever-gauzy-access-key
            MINIO_ROOT_PASSWORD: ever-gauzy-secret-key
        command: server /data --address :9000 --console-address ":9001"
        ports:
            - 9000:9000
            - 9001:9001
        networks:
            - overlay

    minio_create_buckets:
        image: minio/mc
        environment:
            - MINIO_ROOT_USER=ever-gauzy-access-key
            - MINIO_ROOT_PASSWORD=ever-gauzy-secret-key
        entrypoint:
            - "/bin/sh"
            - "-c"
        command:
            - "until (/usr/bin/mc alias set minio http://minio:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD) do
                    echo 'Waiting to start minio...' && sleep 1;
               done;
               /usr/bin/mc mb minio/ever-gauzy --region=eu-north-1;
               exit 0;"
        depends_on:
            - minio
        networks:
            - overlay

    pgweb:
        image: sosedoff/pgweb
        container_name: pgweb
        restart: always
        depends_on:
            - db
        links:
            - db:${DB_HOST:-db}
        environment:
            POSTGRES_DB: ${DB_NAME:-postgres}
            POSTGRES_USER: ${DB_USER:-postgres}
            POSTGRES_PASSWORD: ${DB_PASS:-root}
            PGWEB_DATABASE_URL: postgres://${DB_USER:-postgres}:${DB_PASS:-root}@${DB_HOST:-db}:${DB_PORT:-5432}/${DB_NAME:-postgres}?sslmode=disable
        ports:
            - '8081:8081'
        networks:
            - overlay

    api:
        container_name: api
        image: gauzy-api:latest
        build:
            context: .
            dockerfile: .deploy/api/Dockerfile
            args:
                NODE_ENV: ${NODE_ENV:-development}
                API_BASE_URL: ${API_BASE_URL:-http://localhost:3000}
                CLIENT_BASE_URL: ${CLIENT_BASE_URL:-http://localhost:4200}
        environment:
            API_HOST: ${API_HOST:-api}
            API_PORT: ${API_PORT:-3000}
            NODE_ENV: ${NODE_ENV:-development}
            DB_HOST: db
            API_BASE_URL: ${API_BASE_URL:-http://localhost:3000}
            CLIENT_BASE_URL: ${CLIENT_BASE_URL:-http://localhost:4200}
            SENTRY_DSN: ${SENTRY_DSN:-}
        env_file:
            - .env.docker
        entrypoint: './entrypoint.compose.sh'
        command: ['node', 'main.js']
        restart: on-failure
        depends_on:
            db:
                condition: service_healthy
            redis:
                condition: service_started
            minio:
                condition: service_started
            minio_create_buckets:
                condition: service_started
            elasticsearch:
                condition: service_healthy
        links:
            - db:${DB_HOST:-db}
        # volumes:
        # - webapp_node_modules:/srv/gauzy/node_modules
        # - api_node_modules:/srv/gauzy/apps/api/node_modules
        ports:
            - '3000:${API_PORT:-3000}'
        networks:
            - overlay

    webapp:
        container_name: webapp
        image: gauzy-webapp:latest
        build:
            context: .
            dockerfile: .deploy/webapp/Dockerfile
            args:
                NODE_ENV: ${NODE_ENV:-development}
                API_BASE_URL: ${API_BASE_URL:-http://localhost:3000}
                CLIENT_BASE_URL: ${CLIENT_BASE_URL:-http://localhost:4200}
                SENTRY_DSN: ${SENTRY_DSN:-}
                CHATWOOT_SDK_TOKEN: ${CHATWOOT_SDK_TOKEN:-}
                CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME:-}
                CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY:-}
                GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY:-}
                GOOGLE_PLACE_AUTOCOMPLETE: ${GOOGLE_PLACE_AUTOCOMPLETE:-false}
                DEFAULT_LATITUDE: ${DEFAULT_LATITUDE:-42.6459136}
                DEFAULT_LONGITUDE: ${DEFAULT_LONGITUDE:-23.3332736}
                DEFAULT_CURRENCY: ${DEFAULT_CURRENCY:-USD}
                DEMO: 'true'
                API_HOST: ${API_HOST:-api}
                API_PORT: ${API_PORT:-3000}
        environment:
            WEB_HOST: ${WEB_HOST:-webapp}
            WEB_PORT: ${WEB_PORT:-4200}
            NODE_ENV: ${NODE_ENV:-development}
            API_BASE_URL: ${API_BASE_URL:-http://localhost:3000}
            CLIENT_BASE_URL: ${CLIENT_BASE_URL:-http://localhost:4200}
            SENTRY_DSN: ${SENTRY_DSN:-}
            CHATWOOT_SDK_TOKEN: ${CHATWOOT_SDK_TOKEN:-}
            CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME:-}
            CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY:-}
            GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY:-}
            GOOGLE_PLACE_AUTOCOMPLETE: ${GOOGLE_PLACE_AUTOCOMPLETE:-false}
            DEFAULT_LATITUDE: ${DEFAULT_LATITUDE:-42.6459136}
            DEFAULT_LONGITUDE: ${DEFAULT_LONGITUDE:-23.3332736}
            DEFAULT_CURRENCY: ${DEFAULT_CURRENCY:-USD}
            DEMO: 'true'
            API_HOST: ${API_HOST:-api}
            API_PORT: ${API_PORT:-3000}
        entrypoint: './entrypoint.compose.sh'
        command: ['nginx', '-g', 'daemon off;']
        env_file:
            - .env.docker
        restart: on-failure
        links:
            - db:${DB_HOST:-db}
            - api:${API_HOST:-api}
        depends_on:
            db:
                condition: service_healthy
            redis:
                condition: service_started
            minio:
                condition: service_started
            minio_create_buckets:
                condition: service_started
            elasticsearch:
                condition: service_healthy
            api:
                condition: service_started
        # volumes:
        # - webapp_node_modules:/srv/gauzy/node_modules
        ports:
            - '4200:${UI_PORT:-4200}'
        networks:
            - overlay

volumes:
    # webapp_node_modules:
    # api_node_modules:
    postgres_data: {}
    elasticsearch_data: {}
    minio_data: {}
    certificates: {}

networks:
    overlay:
        driver: bridge
