name: Deploy to DigitalOcean Droplet Prod Pre

on:
  push:
    branches:
      - droplets

jobs:
  deploy:
    runs-on: ubuntu-latest  # Using GitHub's default runner

    environment: prod

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh  # Ensure the .ssh directory exists
          echo "${{ secrets.DO_DROPLET_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "Host *" > ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Globalise Ingress certificate type env
        run: |
          echo "INGRESS_CERT_TYPE=${{ env.INGRESS_CERT_TYPE }}" >> $GITHUB_ENV
        env:
          INGRESS_CERT_TYPE: 'cloudflare'

      - name: Generate TLS Secrets for DO Droplet
        run: |
          rm -f $GITHUB_WORKSPACE/.deploy/ssh/with-cloudflare/prod/ingress.api.crt $GITHUB_WORKSPACE/.deploy/ssh/with-cloudflare/prod/ingress.api.key
          echo ${{ secrets.INGRESS_API_CERT }} | base64 --decode > $GITHUB_WORKSPACE/.deploy/ssh/with-cloudflare/prod/ingress.api.crt
          echo ${{ secrets.INGRESS_API_CERT_KEY }} | base64 --decode > $GITHUB_WORKSPACE/.deploy/ssh/with-cloudflare/prod/ingress.api.key

      - name: Copy file via scp - cloudflare
        run: |
          scp .deploy/ssh/with-cloudflare/prod/docker-compose.api.prod.cloudflare.pre.yml \
              .deploy/ssh/with-cloudflare/prod/nginx.prod.pre.cloudflare.conf \
              .deploy/ssh/with-cloudflare/prod/ingress.api.crt \
              .deploy/ssh/with-cloudflare/prod/ingress.api.key \
              ${{ secrets.DO_DROPLET_USERNAME }}@${{ secrets.DO_DROPLET_PROD_HOST }}:~

      - name: Copy file via scp - letsencrypt
        run: |
          scp .deploy/ssh/with-letsencrypt/prod/docker-compose.api.prod.letsencrypt.pre.yml \
              .deploy/ssh/with-letsencrypt/prod/user_conf.d \
              .deploy/ssh/with-letsencrypt/prod/nginx-certbot.env \
              ${{ secrets.DO_DROPLET_USERNAME }}@${{ secrets.DO_DROPLET_PROD_HOST }}:~

      - name: Install Docker
        run: |
          ssh ${{ secrets.DO_DROPLET_USERNAME }}@${{ secrets.DO_DROPLET_PROD_HOST }} << 'EOF'
            if ! command -v docker &> /dev/null; then
              echo "Docker not installed. Installing..."
              sudo apt-get update
              sudo apt-get install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
            else
              echo "Docker is already installed."
            fi
          EOF

      - name: Install Docker Compose
        run: |
          ssh ${{ secrets.DO_DROPLET_USERNAME }}@${{ secrets.DO_DROPLET_PROD_HOST }} << 'EOF'
            if ! command -v docker-compose &> /dev/null; then
              echo "Docker Compose not installed. Installing..."
              sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            else
              echo "Docker Compose is already installed."
            fi
          EOF

      - name: Deploy to DigitalOcean Droplet
        run: |
          ssh ${{ secrets.DO_DROPLET_USERNAME }}@${{ secrets.DO_DROPLET_PROD_HOST }} << 'EOF'
            if [ "${INGRESS_CERT_TYPE}" = "cloudflare" ]; then
              docker-compose -f .deploy/ssh/with-letsencrypt/prod/docker-compose.api.prod.letsencrypt.pre.yml down
              docker-compose -f .deploy/ssh/with-cloudflare/prod/docker-compose.api.prod.cloudflare.pre.yml up -d
            elif [ "${INGRESS_CERT_TYPE}" = "letsencrypt" ]; then
              docker-compose -f .deploy/ssh/with-cloudflare/prod/docker-compose.api.prod.cloudflare.pre.yml down
              docker-compose -f .deploy/ssh/with-letsencrypt/prod/docker-compose.api.prod.letsencrypt.pre.yml up -d
            else
              echo "Unknown INGRESS_CERT_TYPE: $INGRESS_CERT_TYPE"
              exit 1
            fi
          EOF
